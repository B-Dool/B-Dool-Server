pipeline {
    agent {
        kubernetes {
            label 'jenkins-agent-docker'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/label: jenkins-agent-docker
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:3273.v4cfe589b_fd83-1
    resources:
      limits:
        memory: 1Gi
        cpu: 1
      requests:
        memory: 1Gi
        cpu: 1
    volumeMounts:
    - mountPath: "/home/jenkins/agent"
      name: workspace-volume
  - name: docker
    image: docker:latest  # Docker CLI만 사용하는 이미지
    securityContext:
      privileged: true
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: "/var/run/docker.sock"
      name: docker-sock
    - mountPath: "/home/jenkins/agent"
      name: workspace-volume
  volumes:
  - name: workspace-volume
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: "/var/run/docker.sock"
"""
        }
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'jungmin-docker'
        REPO_URL = 'https://github.com/jungmin7315/B-Dool-Server.git'
        DOCKER_HUB_URL = 'jungmin7315'
        IMAGE_NAME = "${DOCKER_HUB_URL}/chat-service"
        KUBECONFIG_PATH = '/root/.kube/kubeconfig'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Setup') {
            steps {
                echo 'Setting up environment with timestamps...'
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'master', url: "${REPO_URL}"
            }
        }

        stage('Build') {
            steps {
                dir('ChatService') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') { // docker 컨테이너에서 실행
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                            def dockerImage = docker.build("${IMAGE_NAME}:${BUILD_NUMBER}", 'ChatService')
                            dockerImage.push()
                            dockerImage.push("latest")
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying ChatService to Kubernetes...'
                withKubeConfig([credentialsId: 'kubernetes-credentials']) {
                    sh """
                        kubectl set image deployment/chat-service chat-service=${IMAGE_NAME}:${BUILD_NUMBER} -n default
                        kubectl rollout status deployment/chat-service -n default
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'ChatService가 성공적으로 빌드, 푸시 및 배포되었습니다.'
        }
        failure {
            echo '빌드 또는 푸시 실패!'
        }
    }
}
