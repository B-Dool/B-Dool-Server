pipeline {
    agent {
        kubernetes {
            label 'buildkit-agent'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/label: buildkit-agent
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    resources:
      limits:
        memory: 1Gi
        cpu: 1
      requests:
        memory: 1Gi
        cpu: 1
    volumeMounts:
    - mountPath: "/home/jenkins/agent"
      name: workspace-volume
  - name: buildkit
    image: moby/buildkit:latest
    securityContext:
      privileged: true
    args:
    - --addr=unix:///run/buildkit/buildkitd.sock
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
    - name: buildkit-socket
      mountPath: /run/buildkit
  volumes:
  - name: workspace-volume
    emptyDir: {}
  - name: buildkit-socket
    emptyDir: {}
"""
        }
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'jungmin-docker'
        REPO_URL = 'https://github.com/jungmin7315/B-Dool-Server.git'
        DOCKER_HUB_URL = 'jungmin7315'
        IMAGE_NAME = "${DOCKER_HUB_URL}/chatservice"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: "${REPO_URL}", branch: 'master'
            }
        }

        stage('Build') {
            steps {
                dir('ChatService') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'

                    // Build 결과 확인
                    sh 'echo "Build output:" && ls -R build/libs/'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('buildkit') {
                    dir('ChatService') {
                        script {
                            withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                sh """
                                export DOCKER_CONFIG=/kaniko/.docker/
                                mkdir -p /kaniko/.docker/
                                echo '{"auths":{"https://index.docker.io/v1/":{"username":"$DOCKER_USERNAME","password":"$DOCKER_PASSWORD"}}}' > /kaniko/.docker/config.json

                                # Dockerfile 복사 및 빌드
                                cp Dockerfile copied_Dockerfile
                                echo "Dockerfile 복사 완료."

                                # BuildKit을 통해 이미지를 빌드하고 푸시
                                echo "Starting BuildKit build..."
                                buildctl --addr unix:///run/buildkit/buildkitd.sock build \
                                    --frontend dockerfile.v0 \
                                    --local context=. \
                                    --local dockerfile=. \
                                    --opt filename=copied_Dockerfile \
                                    --output type=image,name=${IMAGE_NAME}:${BUILD_NUMBER},push=true

                                echo "Tagging image as latest..."
                                buildctl --addr unix:///run/buildkit/buildkitd.sock build \
                                    --frontend dockerfile.v0 \
                                    --local context=. \
                                    --local dockerfile=. \
                                    --opt filename=copied_Dockerfile \
                                    --output type=image,name=${IMAGE_NAME}:latest,push=true
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying ChatService to Kubernetes...'
                withKubeConfig([credentialsId: 'jungmin-kube']) {
                    sh """
                        kubectl set image deployment/chat-service chat-service=${IMAGE_NAME}:${BUILD_NUMBER} -n default
                        kubectl rollout status deployment/chat-service -n default
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'ChatService가 성공적으로 빌드, 푸시 및 배포되었습니다.'
        }
        failure {
            echo '빌드 또는 푸시 실패!'
        }
    }
}