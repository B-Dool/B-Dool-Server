pipeline {
    agent {
        kubernetes {
            label 'kubernetes-CICD'
            defaultContainer 'jnlp'
            yaml """
            // 기존의 Kubernetes Pod 설정
            """
        }
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-hub'
        REPO_URL = 'https://github.com/B-Dool/B-Dool-Server.git'
        DOCKER_HUB_URL = 'kang1521'
        IMAGE_NAME = "${DOCKER_HUB_URL}/chat"
    }

    stages {
        stage('Clone Repository') {
            steps {
                deleteDir() // 워크스페이스 초기화
                git url: "${REPO_URL}", branch: 'master', changelog: false, poll: false
            }
        }

        stage('Build') {
            when {
                expression {
                    // 이전 빌드가 실패했거나, 코드에 변경이 있는 경우 실행
                    currentBuild.previousBuild?.result == 'FAILURE' ||
                    changeset "ChatService/**/*"
                }
            }
            steps {
                dir('ChatService') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build --no-build-cache'
                }
            }
        }

        stage('Build and Push Docker Image') {
            when {
                expression {
                    currentBuild.previousBuild?.result == 'FAILURE' ||
                    changeset "ChatService/**/*"
                }
            }
            steps {
                dir('ChatService') {
                    container('buildkit') {
                        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            script {
                                dockerLogin()
                            }
                            sh """
                            # Dockerfile 복사
                            cp Dockerfile copied_Dockerfile

                            # BuildKit을 사용하여 이미지 빌드 및 푸시 (캐시 사용 안 함)
                            buildctl --addr unix:///run/buildkit/buildkitd.sock build \
                                --frontend dockerfile.v0 \
                                --local context=. \
                                --local dockerfile=. \
                                --opt filename=copied_Dockerfile \
                                --opt no-cache=true \
                                --output type=image,name=${IMAGE_NAME}:${BUILD_NUMBER},name=${IMAGE_NAME}:latest,push=true
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "배포가 성공적으로 완료되었습니다."
        }
        failure {
            echo "배포에 실패했습니다."
        }
    }
}

def dockerLogin() {
    sh """
        mkdir -p ~/.docker
        echo '{ "auths": { "https://index.docker.io/v1/": { "username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'" } } }' > ~/.docker/config.json
    """
}
